import json
import os 

class Product():
    def __init__(self,product_id,name,price,quantity):
        self.product_id = product_id
        self.name = name
        self.price = price
        self.quantity = quantity
        

    def display_product_details(self):
            """Displays the product details"""
            print(f"Product ID :{self.product_id},  Name :{self.name},  Price :{self.price},   Quantity :{self.quantity}")
            
    def update_product_price (self,new_price):
        '''update the product price details'''
        self.price = new_price
    
    def update_product_quantity(self,new_quantity):
        '''update the product quantity details'''
        self.quantity = new_quantity
        

class Inventory_management:

    def __init__(self):
        self.inventory = {}
        self.load_from_file() #Load data when program starts

    def save_to_file(self):
        """Save inventory to a JSON file."""
    try:
        data = {pid: {"product_id": product.product_id, "name": product.name, "price": product.price, "quantity": product.quantity} for pid, product in self.inventory.items()}
        with open("inventory.json", "w") as file:
            json.dump(data, file, indent=4)
        print("Inventory saved successfully.")
    except Exception as e:
        print(f"Error saving data: {e}")


    def load_from_file(self):
        """Load inventory from a JSON file."""
        try:
            with open("inventory.json", "r") as file:
                content = file.read()
                if content:  # Check if the file is not empty
                    data = json.loads(content)
                    self.inventory = {int(pid): Product(**details) for pid, details in data.items()} # ** unpack the dict details 
                    print("Inventory loaded successfully.")
                else:
                    print("Inventory file is empty. Starting fresh.")
        except (FileNotFoundError, json.JSONDecodeError):
            print("No previous inventory found. Starting fresh.")



    
    
    def add_product(self):
        """Adds a new product to the inventory."""
  
        try:
            product_id = int(input("Enter the product ID:"))
            if product_id in self.inventory:
                print("Product ID already exists.")
                return

            name = input("Enter the name :") 

            price = float(input("Enter the price :"))
            if price < 0:
                print("Invalid Input! Price must be a positive  number.")
                return
            
            

            quantity = int(input("Enter the quantity of product:"))
            if quantity < 0:
               print("Invalid Input! Quantity must be a positive whole number.")
               return
            
            bar_code = input("enter the barcode and the barcode format will be bc_xxxx:") #bar_code : bc_XXXXX

            


            
                    


                    

            

            
           
            self.inventory[product_id] = Product(product_id,name,price,quantity,bar_code)
            self.save_to_file()
            print("product added successfully.")
        except ValueError:
            print("Invalid input! Please enter numbers for Product ID, Price, and Quantity.")
        except Exception as e:
            print(f"An unexpected error occurred: {e}")

           

      
    def remove_product(self):
        """Removes a product from the inventory."""
        try:
            product_id = int(input("Enter the  product ID to remove :"))
            if product_id in self.inventory:
                del self.inventory[product_id]
                self.save_to_file() # Auto-save after removing 
                print(f"product id {product_id} removed successfully.")
            else:
                print("Product ID not found")
        except ValueError:
            print("Invalid input! Please enter a numeric Product ID.")
        except Exception as e:
            print(f"An unexpected error occurred: {e}")







       
    def  update_product(self):
         
        """Updates the price or quantity of an existing product."""

        try:
        
            product_id = int(input("Enter the product ID to update :"))

            if product_id in self.inventory:
                print("What you want to update ?")
                print("1.Do you want to update price ?")
                print("2.Do you want to update the quantity ")
                choice = int(input("Enter 1 to update price or 2 o updae quantity : "))

                if choice == 1:
                    new_price = float(input("Enter the price :"))
                    if new_price < 0:
                        print("Invalid price! Please enter positive number.")
                    else:
                        self.inventory[product_id].price = new_price
                        self.save_to_file() # auto-save after updating
                        print(f"Product ID {product_id}updated successfully. ")

                elif choice == 2:
                    new_quantity = int(input("Enter the quantity :"))
                    if new_quantity < 0:
                        print("Invalid quantity!Please enter positive")
                    else:
                        self.inventory[product_id].quantity = new_quantity
                        self.save_to_file() #auto-save after updating
                        print(f"Product Id {product_id}updated successfully.")
            
                else:
                    print("Invalid choice.Please enter 1 or 2.") 
            else:
                print("Product Id not found.")

        except ValueError:
            print("Invalid input.Please enter a number.")





            
    def  search_product(self):
        try:
            search_type =int(input("Search by (1) product ID or (2) product name ? Enter 1 or 2:?"))
            
            if search_type == 1:
                product_id = int(input("Enter the product_id:"))
                if product_id in self.inventory:
                    product = self.inventory[product_id]
                    print(f"Product Found.Name {product.name},  Price {product.price},   Quantity {product.quantity}")
                else:
                    print("Product Id not found.")
            elif search_type ==2:
                
                name = input("Enter the product name:").strip().lower()
                found = False
                for product in self.inventory.values():
                    if product.name.lower() == name:
                        print(f"Product Found.Name {product.name},Price {product.price},Quantity {product.quantity}")
                        found =True
                        break
                if not found:
                    print("product name not found.")             
                    
                    
            else:

                print("Invalid choice! Please enter 1 or 2.")

        except Exception as e:
            print(f"An error occured :{e}")
                
                

        


        
    def  product_report(self):
        try:
            if not self.inventory:
                print("Inventory is empty.No products to dispaly.")
            else:
                for product in self.inventory.values():
                    print(f"product id :{product.product_id},Name :{product.name},Price :{product.price},Quantity :{product.quantity}")


        except Exception as e:
            print(f"An unexpected error occurred: {e}")




       

if __name__=="__main__":
        inventory_system = Inventory_management()

        while True:
            print("Welcome to inventory management.Enter an option")
            print("1.Add a new product to the inventory.")
            print("2.Remove a product ")
            print("3.Update the products details")
            print("4.search for a product by product_id or name.")
            print("5.Generate a report of all products in the inventory")
            print("6.exit")

            try:
                user_choice = int(input("Enter the option:"))
                if user_choice == 1:
                    inventory_system.add_product()
                elif user_choice == 2:
                    inventory_system.remove_product()
                elif user_choice == 3:
                    inventory_system.update_product()
                elif user_choice == 4:
                    inventory_system.search_product()
                elif user_choice == 5:
                    inventory_system.product_report()
                elif user_choice == 6:
                    inventory_system.save_to_file()
                    print("Exisiting Inventory management.GoodBye!")
                    break
                else:
                    print("Invalid choice. Please enter the number between 1 and 6.")
            except ValueError:
                print("Invalid input.Please enter a number.")

                